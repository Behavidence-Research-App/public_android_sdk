
package com.behavidence.android.sdk_internal.core.Auth;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import java.util.Calendar;

public abstract class AnonymousAuth implements BehavidenceAuth {


    /**
     * user id and passcode is the user identity in our server
     * @param id id generated by Behavidence SDK
     * @param passcode password generated by Behavidence SDK
     * @return AnonymousAuth
     */
    @NonNull
    public static AnonymousAuth createAnonymousAuth(@NonNull String id,@NonNull String passcode){
        return new AnonymousAuthImp(null,id,passcode,0);
    }

    /**
     *
     * @return get userid generated by Behavidence SDK
     */
    @Nullable
    public abstract String getId();

    /**
     *
     * @return password generated by the Behavidence SDK
     */
    @Nullable
    public abstract String getPassCode();

    /**
     *
     * @return access-token if accesstoken is not expired else return null
     */
    @Nullable
    public abstract String getAccessToken();

    /**
     *
     * @return get time in milliseconds UTC till access token is valid
     */
    public abstract long getAccessTokenTTL();

}
class AnonymousAuthImp extends AnonymousAuth{
    private  String accessToken;
    private  String id;
    private  String passCode;
    private  long accessTokenTTL;


     AnonymousAuthImp(@Nullable String accessToken, @Nullable String id,@Nullable String passCode, long accessTokenTTL) {
        this.accessToken = accessToken;
        this.id = id;
        this.passCode = passCode;
        setSessionTTL(accessTokenTTL);
    }

    @NonNull
     AnonymousAuthImp setSessionToken(@Nullable String accessToken) {
        this.accessToken = accessToken;
        return this;
    }

    @NonNull
     AnonymousAuthImp setId(@Nullable String id) {
        this.id = id;
        return this;
    }

    @NonNull
     AnonymousAuthImp setPassCode(@Nullable String passCode) {
        this.passCode = passCode;
        return this;
    }

    @NonNull
     AnonymousAuthImp setSessionTTL(long accessTokenTTL) {
        if(accessTokenTTL>-1)
        this.accessTokenTTL = accessTokenTTL;
        return this;
    }


    private boolean isAccessTokenExpired(){
        return Calendar.getInstance().getTimeInMillis()>accessTokenTTL;
    }

    @Nullable
    @Override
    public String getId() {
        return id;
    }

    @Nullable
    @Override
    public String getPassCode() {
        return passCode;
    }

    @Nullable
    @Override
    public String getAccessToken() {
        if(isAccessTokenExpired())
            return null;
        return accessToken;
    }

    @Override
    public long getAccessTokenTTL() {
        return accessTokenTTL;
    }

    @Nullable
    @Override
    public String getToken() {
        if(isAccessTokenExpired())
            return null;
        return accessToken;
    }
}
